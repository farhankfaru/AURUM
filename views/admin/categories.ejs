<%- include('../partials/admin/header', { 
    title: 'Category Management - AURUM Admin',
    pageTitle: 'Category Management',
    currentPage: 'categories'
}) %>

<style>
    /* Category Management Specific Styles */
    .categories-container {
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    /* Alert System */
    .alert-container {
        position: fixed;
        top: 80px;
        right: 20px;
        z-index: 10001;
        max-width: 400px;
        width: 100%;
    }

    .alert {
        padding: 1rem 1.5rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        display: none;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        border-left: 5px solid;
        animation: slideInRight 0.3s ease;
        position: relative;
    }

    .alert.show { display: block; }
    .alert.success { background: #d1fae5; color: #065f46; border-left-color: #10b981; }
    .alert.error { background: #fee2e2; color: #991b1b; border-left-color: #ef4444; }
    .alert.warning { background: #fef3c7; color: #92400e; border-left-color: #f59e0b; }

    .alert-close {
        position: absolute;
        top: 0.5rem;
        right: 0.75rem;
        background: none;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: inherit;
        opacity: 0.7;
    }

    .alert-close:hover { opacity: 1; }

    @keyframes slideInRight {
        from { opacity: 0; transform: translateX(100%); }
        to { opacity: 1; transform: translateX(0); }
    }

    @keyframes slideOutRight {
        from { opacity: 1; transform: translateX(0); }
        to { opacity: 0; transform: translateX(100%); }
    }

    /* Header Section */
    .categories-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .categories-stats {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .stat-card {
        background: white;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        border: 1px solid var(--border-color);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        min-width: 120px;
    }

    .stat-number {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--aurum-gold);
    }

    .stat-label {
        font-size: 0.9rem;
        color: #666;
        margin-top: 0.25rem;
    }

    /* Add Category Form */
    .add-category-section {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }

    .add-category-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--dark-text);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 2fr auto;
        gap: 1rem;
        align-items: end;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-label {
        font-weight: 500;
        color: var(--dark-text);
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .form-input, .form-textarea {
        padding: 0.75rem 1rem;
        border: 2px solid var(--border-color);
        border-radius: 8px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        font-family: inherit;
    }

    .form-input:focus, .form-textarea:focus {
        outline: none;
        border-color: var(--aurum-gold);
        box-shadow: 0 0 0 3px rgba(139, 115, 85, 0.1);
    }

    .form-textarea {
        min-height: 80px;
        resize: vertical;
    }

    .add-btn {
        background: var(--aurum-gold);
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 8px;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.3s ease;
        height: fit-content;
    }

    .add-btn:hover {
        background: #6B5B47;
        transform: translateY(-1px);
    }

    .add-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    /* Search and Filter Section */
    .search-filter-section {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }

    .search-controls {
        display: flex;
        gap: 1rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .search-box {
        flex: 1;
        min-width: 300px;
        position: relative;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 3rem;
        border: 2px solid var(--border-color);
        border-radius: 8px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

    .search-input:focus {
        outline: none;
        border-color: var(--aurum-gold);
        box-shadow: 0 0 0 3px rgba(139, 115, 85, 0.1);
    }

    .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--light-text);
    }

    .filter-select {
        padding: 0.75rem 1rem;
        border: 2px solid var(--border-color);
        border-radius: 8px;
        font-size: 0.9rem;
        background: white;
        min-width: 120px;
    }

    .reset-btn {
        background: #6b7280;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .reset-btn:hover {
        background: #4b5563;
    }

    /* Table Container with Scroll */
    .categories-table-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        overflow: hidden;
        margin-bottom: 2rem;
    }

    .table-scroll {
        overflow-x: auto;
        overflow-y: auto;
        max-height: 600px;
    }

    /* Custom Scrollbar for Table */
    .table-scroll::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    .table-scroll::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }

    .table-scroll::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #8B7355, #A0956B);
        border-radius: 10px;
    }

    .table-scroll::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #6B5B47, #8B7355);
    }

    .categories-table {
        width: 100%;
        border-collapse: collapse;
        min-width: 1000px;
    }

    .categories-table th {
        background: var(--aurum-gold);
        color: white;
        padding: 1.2rem 1rem;
        text-align: left;
        font-weight: 600;
        font-size: 0.9rem;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .categories-table td {
        padding: 1.2rem 1rem;
        border-bottom: 1px solid #f0f0f0;
        vertical-align: middle;
    }

    .categories-table tr:hover {
        background: #fafafa;
    }

    /* Status and Offer Badges */
    .status-badge, .offer-badge {
        padding: 0.4rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
        text-align: center;
        display: inline-block;
    }

    .status-listed {
        background: #dcfce7;
        color: #166534;
    }

    .status-unlisted {
        background: #fee2e2;
        color: #dc2626;
    }

    .offer-active {
        background: #ff6b35;
        color: white;
    }

    .offer-none {
        background: #f3f4f6;
        color: #6b7280;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .action-btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.8rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-offer-add {
        background: #059669;
        color: white;
    }

    .btn-offer-add:hover {
        background: #047857;
    }

    .btn-offer-edit {
        background: #d97706;
        color: white;
    }

    .btn-offer-edit:hover {
        background: #b45309;
    }

    .btn-edit {
        background: #2563eb;
        color: white;
    }

    .btn-edit:hover {
        background: #1d4ed8;
    }

    .btn-toggle {
        background: #7c3aed;
        color: white;
    }

    .btn-toggle:hover {
        background: #6d28d9;
    }

    .btn-delete {
        background: #dc2626;
        color: white;
    }

    .btn-delete:hover {
        background: #b91c1c;
    }

    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: white;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-top: 1rem;
    }

    .pagination-info {
        color: #666;
        font-size: 0.9rem;
    }

    .pagination-controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .page-btn {
        padding: 0.5rem 1rem;
        border: 1px solid var(--border-color);
        background: white;
        color: var(--dark-text);
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

    .page-btn:hover:not(:disabled) {
        background: var(--bg-main);
    }

    .page-btn.active {
        background: var(--aurum-gold);
        color: white;
        border-color: var(--aurum-gold);
    }

    .page-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.6);
        z-index: 10002;
        display: none;
        justify-content: center;
        align-items: center;
    }

    .modal-overlay.show {
        display: flex;
        animation: fadeIn 0.3s ease;
    }

    .modal {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        max-width: 500px;
        width: 90%;
        box-shadow: 0 25px 50px rgba(0,0,0,0.3);
        animation: modalSlide 0.3s ease;
        max-height: 80vh;
        overflow-y: auto;
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes modalSlide {
        from { opacity: 0; transform: translateY(-30px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .modal h3 {
        margin-bottom: 1.5rem;
        color: var(--dark-text);
        font-size: 1.3rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .modal-form {
        margin-bottom: 2rem;
    }

    .modal-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }

    .modal-btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .modal-btn.primary {
        background: var(--aurum-gold);
        color: white;
    }

    .modal-btn.primary:hover {
        background: #6B5B47;
    }

    .modal-btn.secondary {
        background: #f8f9fa;
        color: var(--dark-text);
        border: 1px solid var(--border-color);
    }

    .modal-btn.secondary:hover {
        background: #e9ecef;
    }

    .modal-btn.danger {
        background: #dc2626;
        color: white;
    }

    .modal-btn.danger:hover {
        background: #b91c1c;
    }

    /* Offer Type Selection */
    .offer-types {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .offer-type {
        padding: 1rem;
        border: 2px solid var(--border-color);
        border-radius: 8px;
        cursor: pointer;
        text-align: center;
        transition: all 0.3s ease;
    }

    .offer-type.selected {
        border-color: var(--aurum-gold);
        background: var(--light-gold);
    }

    .offer-type-icon {
        font-size: 1.5rem;
        color: var(--aurum-gold);
        margin-bottom: 0.5rem;
    }

    .offer-type-title {
        font-weight: 500;
        color: var(--dark-text);
        margin-bottom: 0.25rem;
    }

    .offer-type-desc {
        font-size: 0.8rem;
        color: var(--light-text);
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem;
        color: #666;
    }

    .empty-state i {
        font-size: 4rem;
        color: var(--aurum-gold);
        margin-bottom: 1rem;
    }

    /* Loading */
    .loading {
        text-align: center;
        padding: 3rem;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid var(--aurum-gold);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .categories-container {
            padding: 1rem;
        }

        .categories-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .categories-stats {
            width: 100%;
            justify-content: space-between;
        }

        .stat-card {
            flex: 1;
            min-width: auto;
        }

        .form-row {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .search-controls {
            flex-direction: column;
        }

        .search-box {
            min-width: 100%;
        }

        .action-buttons {
            flex-direction: column;
        }

        .action-btn {
            width: 100%;
        }

        .pagination-container {
            flex-direction: column;
            gap: 1rem;
        }

        .offer-types {
            grid-template-columns: 1fr;
        }
    }
</style>

<!-- Alert Container -->
<div class="alert-container" id="alertContainer"></div>

<div class="categories-container">
    <!-- Categories Header -->
    <div class="categories-header">
        <h1>Category Management</h1>
        <div class="categories-stats" id="categoryStats">
            <div class="stat-card">
                <div class="stat-number" id="totalCategories">0</div>
                <div class="stat-label">Total</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="listedCategories">0</div>
                <div class="stat-label">Listed</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="unlistedCategories">0</div>
                <div class="stat-label">Unlisted</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="categoriesWithOffers">0</div>
                <div class="stat-label">With Offers</div>
            </div>
        </div>
    </div>

    <!-- Add Category Section -->
    <div class="add-category-section">
        <h2 class="add-category-title">
            <i class="fas fa-plus-circle"></i>
            Add New Category
        </h2>
        <form id="addCategoryForm">
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">Category Name</label>
                    <input type="text" id="categoryName" class="form-input" placeholder="Enter category name" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea id="categoryDescription" class="form-textarea" placeholder="Enter category description" required></textarea>
                </div>
                <div class="form-group">
                    <button type="submit" class="add-btn" id="addCategoryBtn">
                        <i class="fas fa-plus"></i> Add Category
                    </button>
                </div>
            </div>
        </form>
    </div>

    <!-- Search and Filter Section -->
    <div class="search-filter-section">
        <div class="search-controls">
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" id="searchInput" class="search-input" placeholder="Search categories by name or description...">
            </div>
            <select id="statusFilter" class="filter-select">
                <option value="all">All Categories</option>
                <option value="listed">Listed Only</option>
                <option value="unlisted">Unlisted Only</option>
            </select>
            <select id="offerFilter" class="filter-select">
                <option value="all">All Offers</option>
                <option value="with-offers">With Offers</option>
                <option value="no-offers">No Offers</option>
            </select>
            <button id="resetBtn" class="reset-btn">
                <i class="fas fa-undo-alt"></i> Reset
            </button>
        </div>
    </div>

    <!-- Categories Table -->
    <div class="categories-table-container">
        <div class="table-scroll">
            <table class="categories-table">
                <thead>
                    <tr>
                        <th>Category Name</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>Offer</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="categoriesTableBody">
                    <!-- Loading placeholder -->
                    <tr>
                        <td colspan="6" class="loading">
                            <div class="spinner"></div>
                            <p>Loading categories...</p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pagination -->
    <div class="pagination-container" id="paginationContainer" style="display: none;">
        <div class="pagination-info" id="paginationInfo">
            Showing 0 to 0 of 0 categories
        </div>
        <div class="pagination-controls" id="paginationControls">
            <!-- Pagination buttons will be inserted here -->
        </div>
    </div>
</div>

<!-- Offer Management Modal -->
<div class="modal-overlay" id="offerModal">
    <div class="modal">
        <h3 id="offerModalTitle">
            <i class="fas fa-percentage"></i>
            Manage Offer
        </h3>
        <div class="modal-form">
            <div class="offer-types" id="offerTypes">
                <div class="offer-type" data-type="percentage">
                    <div class="offer-type-icon">
                        <i class="fas fa-percentage"></i>
                    </div>
                    <div class="offer-type-title">Percentage</div>
                    <div class="offer-type-desc">Discount by percentage</div>
                </div>
                <div class="offer-type" data-type="fixed">
                    <div class="offer-type-icon">
                        <i class="fas fa-rupee-sign"></i>
                    </div>
                    <div class="offer-type-title">Fixed Amount</div>
                    <div class="offer-type-desc">Fixed amount discount</div>
                </div>
            </div>
            <div class="form-group">
                <label class="form-label" id="offerValueLabel">Offer Value</label>
                <input type="number" id="offerValue" class="form-input" placeholder="Enter offer value" min="0" step="0.01" required>
            </div>
        </div>
        <div class="modal-actions">
            <button class="modal-btn secondary" id="offerModalCancel">Cancel</button>
            <button class="modal-btn danger" id="removeOfferBtn" style="display: none;">Remove Offer</button>
            <button class="modal-btn primary" id="offerModalSave">Save Offer</button>
        </div>
    </div>
</div>

<!-- Edit Category Modal -->
<div class="modal-overlay" id="editModal">
    <div class="modal">
        <h3>
            <i class="fas fa-edit"></i>
            Edit Category
        </h3>
        <div class="modal-form">
            <div class="form-group">
                <label class="form-label">Category Name</label>
                <input type="text" id="editCategoryName" class="form-input" placeholder="Enter category name" required>
            </div>
            <div class="form-group">
                <label class="form-label">Description</label>
                <textarea id="editCategoryDescription" class="form-textarea" placeholder="Enter category description" required></textarea>
            </div>
        </div>
        <div class="modal-actions">
            <button class="modal-btn secondary" id="editModalCancel">Cancel</button>
            <button class="modal-btn primary" id="editModalSave">Update Category</button>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal-overlay" id="confirmModal">
    <div class="modal">
        <h3 id="confirmModalTitle">Confirm Action</h3>
        <p id="confirmModalMessage">Are you sure you want to perform this action?</p>
        <div class="modal-actions">
            <button class="modal-btn secondary" id="confirmModalCancel">Cancel</button>
            <button class="modal-btn danger" id="confirmModalConfirm">Confirm</button>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let allCategories = []; // Store all categories from server
    let currentCategories = []; // Currently displayed categories
    let filteredCategories = []; // Filtered categories
    let currentPage = 1;
    let categoriesPerPage = 3; // Show 3 categories per page
    let totalPages = 1;
    let currentEditingCategory = null;
    let currentOfferCategory = null;

    // Initialize
    loadAllCategories();

    // Event Listeners
    document.getElementById('addCategoryForm').addEventListener('submit', handleAddCategory);
    document.getElementById('searchInput').addEventListener('input', debounce(handleSearch, 300));
    document.getElementById('statusFilter').addEventListener('change', handleFilter);
    document.getElementById('offerFilter').addEventListener('change', handleFilter);
    document.getElementById('resetBtn').addEventListener('click', resetFilters);

    // Modal event listeners
    setupModalEventListeners();

    // Load ALL categories function - without pagination limit
    async function loadAllCategories() {
        try {
            showLoading(true);
            
            // Get ALL categories without limit
            const response = await fetch('/admin/api/categories?limit=100'); // Get up to 100 categories
            
            if (!response.ok) {
                throw new Error('Failed to load categories');
            }
            
            const data = await response.json();
            
            if (data.success) {
                allCategories = data.data.categories || [];
                filteredCategories = [...allCategories];
                const stats = data.data.stats || {};
                
                console.log('=== LOADED CATEGORIES ===');
                console.log('Total categories loaded:', allCategories.length);
                console.log('categoriesPerPage:', categoriesPerPage);
                
                updateStats(stats);
                renderCategoriesTable();
                renderPagination();
            } else {
                throw new Error(data.message || 'Failed to load categories');
            }
        } catch (error) {
            console.error('Error loading categories:', error);
            showAlert('Failed to load categories. Please refresh the page.', 'error');
            showEmptyState('Error loading categories');
        } finally {
            showLoading(false);
        }
    }

    // Add category function
    async function handleAddCategory(e) {
        e.preventDefault();
        
        const name = document.getElementById('categoryName').value.trim();
        const description = document.getElementById('categoryDescription').value.trim();
        
        if (!name || !description) {
            showAlert('Please fill in all fields', 'error');
            return;
        }
        
        try {
            const addBtn = document.getElementById('addCategoryBtn');
            addBtn.disabled = true;
            addBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
            
            const response = await fetch('/admin/api/categories', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    categoryname: name,
                    description: description
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                showAlert('✅ Category added successfully', 'success');
                document.getElementById('addCategoryForm').reset();
                loadAllCategories();
            } else {
                throw new Error(data.message || 'Failed to add category');
            }
        } catch (error) {
            console.error('Error adding category:', error);
            showAlert(`❌ ${error.message}`, 'error');
        } finally {
            const addBtn = document.getElementById('addCategoryBtn');
            addBtn.disabled = false;
            addBtn.innerHTML = '<i class="fas fa-plus"></i> Add Category';
        }
    }

    // Search and filter functions
    function handleSearch() {
        applyFilters();
    }

    function handleFilter() {
        applyFilters();
    }

    function applyFilters() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
        const statusFilter = document.getElementById('statusFilter').value;
        const offerFilter = document.getElementById('offerFilter').value;
        
        filteredCategories = allCategories.filter(category => {
            // Don't show soft-deleted categories
            if (category.isDeleted) return false;
            
            const matchesSearch = searchTerm === '' || 
                (category.categoryname && category.categoryname.toLowerCase().includes(searchTerm)) ||
                (category.description && category.description.toLowerCase().includes(searchTerm));
            
            const matchesStatus = statusFilter === 'all' ||
                (statusFilter === 'listed' && category.islisted) ||
                (statusFilter === 'unlisted' && !category.islisted);
            
            const hasOffer = category.categoryoffer > 0;
            const matchesOffer = offerFilter === 'all' ||
                (offerFilter === 'with-offers' && hasOffer) ||
                (offerFilter === 'no-offers' && !hasOffer);
            
            return matchesSearch && matchesStatus && matchesOffer;
        });
        
        currentPage = 1;
        renderCategoriesTable();
        renderPagination();
    }

    function resetFilters() {
        document.getElementById('searchInput').value = '';
        document.getElementById('statusFilter').value = 'all';
        document.getElementById('offerFilter').value = 'all';
        filteredCategories = allCategories.filter(category => !category.isDeleted);
        currentPage = 1;
        renderCategoriesTable();
        renderPagination();
    }

    // Update statistics
    function updateStats(stats) {
        document.getElementById('totalCategories').textContent = stats.total || 0;
        document.getElementById('listedCategories').textContent = stats.listed || 0;
        document.getElementById('unlistedCategories').textContent = stats.unlisted || 0;
        document.getElementById('categoriesWithOffers').textContent = stats.withOffers || 0;
    }

    // Render categories table
    function renderCategoriesTable() {
        const tbody = document.getElementById('categoriesTableBody');
        
        console.log('=== RENDER CATEGORIES TABLE ===');
        console.log('filteredCategories.length:', filteredCategories.length);
        console.log('currentPage:', currentPage);
        console.log('categoriesPerPage:', categoriesPerPage);
        
        if (filteredCategories.length === 0) {
            showEmptyState();
            return;
        }

        // Calculate pagination
        const startIndex = (currentPage - 1) * categoriesPerPage;
        const endIndex = startIndex + categoriesPerPage;
        const categoriesToShow = filteredCategories.slice(startIndex, endIndex);

        console.log('startIndex:', startIndex, 'endIndex:', endIndex, 'categoriesToShow.length:', categoriesToShow.length);

        tbody.innerHTML = categoriesToShow.map(category => {
            const createdDate = category.createdAt ? 
                new Date(category.createdAt).toLocaleDateString('en-IN', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                }) : 'N/A';

            const hasOffer = category.categoryoffer > 0;
            const offerText = hasOffer ? 
                `${category.discountType === 'percentage' ? category.categoryoffer + '%' : '₹' + category.categoryoffer} OFF` : 
                'No offer';

            return `
                <tr>
                    <td>
                        <div style="font-weight: 500;">${category.categoryname}</div>
                    </td>
                    <td>
                        <div style="max-width: 200px; overflow: hidden; text-overflow: ellipsis;" title="${category.description}">
                            ${category.description}
                        </div>
                    </td>
                    <td>
                        <span class="status-badge ${category.islisted ? 'status-listed' : 'status-unlisted'}">
                            ${category.islisted ? 'Listed' : 'Unlisted'}
                        </span>
                    </td>
                    <td>
                        <span class="offer-badge ${hasOffer ? 'offer-active' : 'offer-none'}">
                            ${offerText}
                        </span>
                    </td>
                    <td>${createdDate}</td>
                    <td>
                        <div class="action-buttons">
                            <button class="action-btn ${hasOffer ? 'btn-offer-edit' : 'btn-offer-add'}" 
                                    onclick="openOfferModal('${category._id}', '${category.categoryname}', ${hasOffer})">
                                ${hasOffer ? 'Edit Offer' : 'Add Offer'}
                            </button>
                            <button class="action-btn btn-edit" onclick="openEditModal('${category._id}')">
                                Edit
                            </button>
                            <button class="action-btn btn-toggle" onclick="toggleCategoryStatus('${category._id}', '${category.categoryname}', ${category.islisted})">
                                ${category.islisted ? 'Unlist' : 'List'}
                            </button>
                            <button class="action-btn btn-delete" onclick="deleteCategory('${category._id}', '${category.categoryname}')">
                                Delete
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        }).join('');
    }

    // Render pagination
    function renderPagination() {
        totalPages = Math.ceil(filteredCategories.length / categoriesPerPage);
        const paginationContainer = document.getElementById('paginationContainer');
        const paginationInfo = document.getElementById('paginationInfo');
        const paginationControls = document.getElementById('paginationControls');

        console.log('=== RENDER PAGINATION ===');
        console.log('filteredCategories.length:', filteredCategories.length);
        console.log('categoriesPerPage:', categoriesPerPage);
        console.log('totalPages:', totalPages);
        console.log('currentPage:', currentPage);

        if (filteredCategories.length === 0) {
            paginationContainer.style.display = 'none';
            return;
        }

        // ALWAYS show pagination if there are categories
        paginationContainer.style.display = 'flex';

        // Update pagination info
        const startIndex = (currentPage - 1) * categoriesPerPage + 1;
        const endIndex = Math.min(currentPage * categoriesPerPage, filteredCategories.length);
        paginationInfo.textContent = `Showing ${startIndex} to ${endIndex} of ${filteredCategories.length} categories`;

        // Generate pagination controls
        let paginationHTML = '';
        
        // Previous button - ALWAYS SHOW
        paginationHTML += `
            <button class="page-btn" ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                <i class="fas fa-chevron-left"></i> Previous
            </button>
        `;

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
                paginationHTML += `
                    <button class="page-btn ${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">
                        ${i}
                    </button>
                `;
            } else if (i === currentPage - 3 || i === currentPage + 3) {
                paginationHTML += '<span style="padding: 0.5rem;">...</span>';
            }
        }

        // Next button - ALWAYS SHOW
        paginationHTML += `
            <button class="page-btn" ${currentPage >= totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                Next <i class="fas fa-chevron-right"></i>
            </button>
        `;

        paginationControls.innerHTML = paginationHTML;
        console.log('Pagination HTML generated, totalPages:', totalPages);
    }

    // Global functions for actions
    window.changePage = function(page) {
        console.log('changePage called with page:', page);
        
        if (page < 1 || page > totalPages) {
            console.log('Invalid page number:', page);
            return;
        }
        
        currentPage = page;
        console.log('currentPage set to:', currentPage);
        
        renderCategoriesTable();
        renderPagination();
    };

    window.openOfferModal = function(categoryId, categoryName, hasOffer) {
        currentOfferCategory = allCategories.find(cat => cat._id === categoryId);
        
        document.getElementById('offerModalTitle').innerHTML = `
            <i class="fas fa-percentage"></i>
            ${hasOffer ? 'Edit' : 'Add'} Offer - ${categoryName}
        `;
        
        // Reset offer types
        document.querySelectorAll('.offer-type').forEach(type => {
            type.classList.remove('selected');
        });
        
        if (hasOffer) {
            // Pre-fill existing offer data
            document.querySelector(`[data-type="${currentOfferCategory.discountType}"]`).classList.add('selected');
            document.getElementById('offerValue').value = currentOfferCategory.categoryoffer;
            document.getElementById('removeOfferBtn').style.display = 'inline-block';
            updateOfferValueLabel(currentOfferCategory.discountType);
        } else {
            // Default to percentage
            document.querySelector('[data-type="percentage"]').classList.add('selected');
            document.getElementById('offerValue').value = '';
            document.getElementById('removeOfferBtn').style.display = 'none';
            updateOfferValueLabel('percentage');
        }
        
        document.getElementById('offerModal').classList.add('show');
    };

    window.openEditModal = function(categoryId) {
        currentEditingCategory = allCategories.find(cat => cat._id === categoryId);
        
        document.getElementById('editCategoryName').value = currentEditingCategory.categoryname;
        document.getElementById('editCategoryDescription').value = currentEditingCategory.description;
        
        document.getElementById('editModal').classList.add('show');
    };

    window.toggleCategoryStatus = async function(categoryId, categoryName, isCurrentlyListed) {
        const action = isCurrentlyListed ? 'unlist' : 'list';
        
        const confirmed = await showConfirmModal(
            `${action.charAt(0).toUpperCase() + action.slice(1)} Category`,
            `Are you sure you want to ${action} the category "${categoryName}"?`,
            'primary'
        );

        if (!confirmed) return;

        try {
            showAlert(`${action.charAt(0).toUpperCase() + action.slice(1)}ing category...`, 'warning', 2000);
            
            const response = await fetch(`/admin/api/categories/${categoryId}/toggle-status`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                showAlert(`✅ ${data.message}`, 'success', 4000);
                loadAllCategories();
            } else {
                throw new Error(data.message || `Failed to ${action} category`);
            }
        } catch (error) {
            console.error(`Error ${action}ing category:`, error);
            showAlert(`❌ Failed to ${action} category. ${error.message}`, 'error', 6000);
        }
    };

    window.deleteCategory = async function(categoryId, categoryName) {
        const confirmed = await showConfirmModal(
            'Delete Category',
            `Are you sure you want to delete "${categoryName}"? This will hide it from users but keep it in the database.`,
            'danger'
        );

        if (!confirmed) return;

        try {
            showAlert('Deleting category...', 'warning', 2000);
            
            const response = await fetch(`/admin/api/categories/${categoryId}/soft-delete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                showAlert('✅ Category deleted successfully', 'success', 4000);
                loadAllCategories();
            } else {
                throw new Error(data.message || 'Failed to delete category');
            }
        } catch (error) {
            console.error('Error deleting category:', error);
            showAlert(`❌ Failed to delete category. ${error.message}`, 'error', 6000);
        }
    };

    // Modal setup
    function setupModalEventListeners() {
        // Offer modal
        document.querySelectorAll('.offer-type').forEach(type => {
            type.addEventListener('click', function() {
                document.querySelectorAll('.offer-type').forEach(t => t.classList.remove('selected'));
                this.classList.add('selected');
                updateOfferValueLabel(this.dataset.type);
            });
        });

        document.getElementById('offerModalCancel').addEventListener('click', () => {
            document.getElementById('offerModal').classList.remove('show');
        });

        document.getElementById('offerModalSave').addEventListener('click', handleSaveOffer);
        document.getElementById('removeOfferBtn').addEventListener('click', handleRemoveOffer);

        // Edit modal
        document.getElementById('editModalCancel').addEventListener('click', () => {
            document.getElementById('editModal').classList.remove('show');
        });

        document.getElementById('editModalSave').addEventListener('click', handleEditCategory);

        // Confirm modal
        document.getElementById('confirmModalCancel').addEventListener('click', () => {
            document.getElementById('confirmModal').classList.remove('show');
        });

        // Close modals when clicking outside
        document.querySelectorAll('.modal-overlay').forEach(overlay => {
            overlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    this.classList.remove('show');
                }
            });
        });
    }

    function updateOfferValueLabel(type) {
        const label = document.getElementById('offerValueLabel');
        const input = document.getElementById('offerValue');
        
        if (type === 'percentage') {
            label.textContent = 'Discount Percentage (%)';
            input.placeholder = 'Enter percentage (e.g., 10)';
            input.max = '100';
        } else {
            label.textContent = 'Discount Amount (₹)';
            input.placeholder = 'Enter amount (e.g., 500)';
            input.removeAttribute('max');
        }
    }

    async function handleSaveOffer() {
        const selectedType = document.querySelector('.offer-type.selected');
        const offerValue = document.getElementById('offerValue').value;
        
        if (!selectedType || !offerValue || parseFloat(offerValue) <= 0) {
            showAlert('Please select offer type and enter a valid value', 'error');
            return;
        }
        
        if (selectedType.dataset.type === 'percentage' && parseFloat(offerValue) > 100) {
            showAlert('Percentage cannot be more than 100%', 'error');
            return;
        }
        
        try {
            const saveBtn = document.getElementById('offerModalSave');
            const originalText = saveBtn.textContent;
            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';
            
            const hasExistingOffer = currentOfferCategory.categoryoffer > 0;
            const url = `/admin/api/categories/${currentOfferCategory._id}/${hasExistingOffer ? 'edit-offer' : 'add-offer'}`;
            const method = hasExistingOffer ? 'PUT' : 'POST';
            
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    discountType: selectedType.dataset.type,
                    categoryoffer: parseFloat(offerValue)
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                showAlert(`✅ ${data.message}`, 'success', 4000);
                document.getElementById('offerModal').classList.remove('show');
                loadAllCategories();
            } else {
                throw new Error(data.message || 'Failed to save offer');
            }
        } catch (error) {
            console.error('Error saving offer:', error);
            showAlert(`❌ ${error.message}`, 'error', 6000);
        } finally {
            const saveBtn = document.getElementById('offerModalSave');
            saveBtn.disabled = false;
            saveBtn.textContent = 'Save Offer';
        }
    }

    async function handleRemoveOffer() {
        const confirmed = await showConfirmModal(
            'Remove Offer',
            'Are you sure you want to remove this offer?',
            'danger'
        );

        if (!confirmed) return;

        try {
            const response = await fetch(`/admin/api/categories/${currentOfferCategory._id}/remove-offer`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                showAlert('✅ Offer removed successfully', 'success', 4000);
                document.getElementById('offerModal').classList.remove('show');
                loadAllCategories();
            } else {
                throw new Error(data.message || 'Failed to remove offer');
            }
        } catch (error) {
            console.error('Error removing offer:', error);
            showAlert(`❌ ${error.message}`, 'error', 6000);
        }
    }

    async function handleEditCategory() {
        const name = document.getElementById('editCategoryName').value.trim();
        const description = document.getElementById('editCategoryDescription').value.trim();
        
        if (!name || !description) {
            showAlert('Please fill in all fields', 'error');
            return;
        }
        
        try {
            const saveBtn = document.getElementById('editModalSave');
            saveBtn.disabled = true;
            saveBtn.textContent = 'Updating...';
            
            const response = await fetch(`/admin/api/categories/${currentEditingCategory._id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    categoryname: name,
                    description: description
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                showAlert('✅ Category updated successfully', 'success', 4000);
                document.getElementById('editModal').classList.remove('show');
                loadAllCategories();
            } else {
                throw new Error(data.message || 'Failed to update category');
            }
        } catch (error) {
            console.error('Error updating category:', error);
            showAlert(`❌ ${error.message}`, 'error', 6000);
        } finally {
            const saveBtn = document.getElementById('editModalSave');
            saveBtn.disabled = false;
            saveBtn.textContent = 'Update Category';
        }
    }

    // Utility functions
    function showConfirmModal(title, message, type = 'primary') {
        return new Promise((resolve) => {
            const modal = document.getElementById('confirmModal');
            const titleElement = document.getElementById('confirmModalTitle');
            const messageElement = document.getElementById('confirmModalMessage');
            const confirmButton = document.getElementById('confirmModalConfirm');
            const cancelButton = document.getElementById('confirmModalCancel');

            titleElement.textContent = title;
            messageElement.textContent = message;
            
            confirmButton.className = `modal-btn ${type}`;
            modal.classList.add('show');

            function cleanup() {
                modal.classList.remove('show');
                confirmButton.removeEventListener('click', onConfirm);
                cancelButton.removeEventListener('click', onCancel);
                modal.removeEventListener('click', onOverlayClick);
            }

            function onConfirm() {
                cleanup();
                resolve(true);
            }

            function onCancel() {
                cleanup();
                resolve(false);
            }

            function onOverlayClick(e) {
                if (e.target === modal) {
                    cleanup();
                    resolve(false);
                }
            }

            confirmButton.addEventListener('click', onConfirm);
            cancelButton.addEventListener('click', onCancel);
            modal.addEventListener('click', onOverlayClick);
        });
    }

    function showAlert(message, type = 'success', duration = 5000) {
        const alertContainer = document.getElementById('alertContainer');
        
        const alertId = 'alert_' + Date.now();
        const alertElement = document.createElement('div');
        alertElement.id = alertId;
        alertElement.className = `alert ${type}`;
        alertElement.innerHTML = `
            <button class="alert-close" onclick="closeAlert('${alertId}')">&times;</button>
            <strong>${type.charAt(0).toUpperCase() + type.slice(1)}:</strong> ${message}
        `;
        
        alertContainer.appendChild(alertElement);
        
        setTimeout(() => {
            alertElement.classList.add('show');
        }, 10);
        
        setTimeout(() => {
            closeAlert(alertId);
        }, duration);
    }

    window.closeAlert = function(alertId) {
        const alertElement = document.getElementById(alertId);
        if (alertElement) {
            alertElement.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => {
                if (alertElement.parentNode) {
                    alertElement.parentNode.removeChild(alertElement);
                }
            }, 300);
        }
    };

    function showLoading(show) {
        const tbody = document.getElementById('categoriesTableBody');
        
        if (show) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="6" class="loading">
                        <div class="spinner"></div>
                        <p>Loading categories...</p>
                    </td>
                </tr>
            `;
        }
    }

    function showEmptyState(message = 'No categories found') {
        const tbody = document.getElementById('categoriesTableBody');
        
        tbody.innerHTML = `
            <tr>
                <td colspan="6" class="empty-state">
                    <i class="fas fa-tags"></i>
                    <h3>${message}</h3>
                    <p>There are no categories matching your criteria.</p>
                </td>
            </tr>
        `;
        
        document.getElementById('paginationContainer').style.display = 'none';
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
});
</script>

</main>
</body>
</html>
