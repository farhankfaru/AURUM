<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify Reset Code - AURUM</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Inter', sans-serif; line-height: 1.6; color: #333; background: #f8fafc; }
        
        .container { display: flex; min-height: 100vh; background: #fff; box-shadow: 0 20px 25px -5px rgba(0,0,0,0.1); }
        
        .image-section { flex: 1; background: linear-gradient(135deg, #8B7355 0%, #A0956B 100%); 
            background-image: url('https://images.unsplash.com/photo-1506744038136-46273834b3fb?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&q=80');
            background-size: cover; background-position: center; position: relative; display: flex; align-items: center; justify-content: center; }
        .overlay { position: absolute; top: 0; left: 0; right: 0; bottom: 0; 
            background: linear-gradient(135deg, rgba(139,115,85,0.9) 0%, rgba(160,149,107,0.9) 100%);
            display: flex; align-items: center; justify-content: center; text-align: center; color: white; padding: 2rem; }
        .brand-info h1 { font-size: 4rem; font-weight: 700; margin-bottom: 1rem; letter-spacing: 0.2em; color: #F5F5DC; }
        .brand-info p { font-size: 1.3rem; font-weight: 300; max-width: 450px; opacity: 0.95; line-height: 1.8; color: #F5F5DC; }
        
        .form-section { flex: 1; display: flex; align-items: center; justify-content: center; padding: 2rem; background: #ffffff; }
        .form-container { width: 100%; max-width: 450px; }
        .form-header { text-align: center; margin-bottom: 2rem; }
        .form-header h2 { font-size: 2.2rem; font-weight: 600; color: #8B7355; margin-bottom: 0.5rem; letter-spacing: 0.05em; }
        .form-header p { color: #6B5B47; font-size: 1rem; font-style: italic; }
        
        .email-info { font-size: 0.9rem; color: #666; margin-bottom: 2rem; padding: 1rem; background: #F5F5DC; 
            border-radius: 12px; border-left: 4px solid #8B7355; text-align: center; }
        .email-info strong { color: #8B7355; }
        
        .alert { padding: 1rem; border-radius: 12px; margin-bottom: 1.5rem; text-align: center; font-size: 0.9rem; font-weight: 500; display: none; }
        .alert.error { background: #fed7d7; border: 1px solid #e53e3e; color: #c53030; }
        .alert.success { background: #c6f6d5; border: 1px solid #38a169; color: #2f855a; }
        .alert.show { display: flex; align-items: center; justify-content: center; gap: 0.5rem; }
        
        .otp-inputs { display: flex; justify-content: space-between; gap: 0.5rem; margin-bottom: 2rem; }
        .otp-input { width: 60px; height: 60px; text-align: center; font-size: 1.5rem; font-weight: 600; 
            border: 2px solid #D4C4A8; border-radius: 12px; background: #FEFCF7; color: #8B7355; 
            transition: all 0.3s ease; outline: none; }
        .otp-input:focus { border-color: #8B7355; background: #fff; box-shadow: 0 0 0 3px rgba(139, 115, 85, 0.1); transform: translateY(-2px); }
        .otp-input.error { border-color: #e53e3e; background: #fed7d7; }
        
        .verify-btn { width: 100%; padding: 1rem; background: linear-gradient(135deg, #8B7355 0%, #A0956B 100%); 
            color: white; border: none; border-radius: 12px; font-size: 1.1rem; font-weight: 600; cursor: pointer; 
            transition: all 0.3s ease; margin-bottom: 1.5rem; letter-spacing: 0.05em; display: flex; align-items: center; justify-content: center; gap: 0.5rem; }
        .verify-btn:hover:not(:disabled) { transform: translateY(-2px); box-shadow: 0 10px 25px rgba(139, 115, 85, 0.3); }
        .verify-btn:disabled { opacity: 0.6; cursor: not-allowed; transform: none; }
        
        .resend-section { text-align: center; font-size: 0.9rem; color: #6B5B47; line-height: 1.5; }
        .resend-btn { background: none; border: none; color: #8B7355; font-weight: 600; cursor: pointer; 
            text-decoration: underline; transition: all 0.3s ease; padding: 0.25rem 0.5rem; border-radius: 4px; }
        .resend-btn:hover:not(:disabled) { color: #6B5B47; background: rgba(139, 115, 85, 0.1); }
        .resend-btn:disabled { color: #999; cursor: not-allowed; text-decoration: none; background: none; }
        .timer { color: #8B7355; font-weight: 500; display: block; margin-top: 0.5rem; }
        
        .loading { display: none; width: 20px; height: 20px; border: 3px solid #ffffff; border-top: 3px solid transparent; 
            border-radius: 50%; animation: spin 1s linear infinite; }
        .resend-spinner { display: inline-block; width: 12px; height: 12px; border: 2px solid #8B7355; 
            border-top: 2px solid transparent; border-radius: 50%; animation: spin 0.8s linear infinite; margin-right: 6px; }
        
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        
        @media (max-width: 768px) {
            .container { flex-direction: column; }
            .image-section { min-height: 30vh; flex: none; }
            .brand-info h1 { font-size: 2.5rem; }
            .brand-info p { font-size: 1.1rem; }
            .form-section { padding: 1.5rem; }
            .form-header h2 { font-size: 1.8rem; }
        }
        @media (max-width: 480px) {
            .form-section { padding: 1rem; }
            .otp-inputs { gap: 0.3rem; }
            .otp-input { width: 45px; height: 55px; font-size: 1.3rem; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="image-section">
            <div class="overlay">
                <div class="brand-info">
                    <h1>AURUM</h1>
                    <p>Verify the reset code to create your new password and continue your journey.</p>
                </div>
            </div>
        </div>
        
        <div class="form-section">
            <div class="form-container">
                <div class="form-header">
                    <h2>Verify Reset Code</h2>
                    <p>Enter the 6-digit code sent to your email</p>
                </div>
                
                <div class="email-info">
                    We've sent a password reset code to<br>
                    <strong><%= email %></strong>
                </div>

                <div class="alert" id="alertBox">
                    <i class="fas fa-info-circle" id="alertIcon"></i>
                    <span id="alertMessage"></span>
                </div>

                <form id="otpForm">
                    <div class="otp-inputs">
                        <input type="text" maxlength="1" class="otp-input" required>
                        <input type="text" maxlength="1" class="otp-input" required>
                        <input type="text" maxlength="1" class="otp-input" required>
                        <input type="text" maxlength="1" class="otp-input" required>
                        <input type="text" maxlength="1" class="otp-input" required>
                        <input type="text" maxlength="1" class="otp-input" required>
                    </div>
                    
                    <button type="submit" class="verify-btn" id="verifyBtn">
                        <span id="btnText">Verify & Continue</span>
                        <div class="loading" id="loader"></div>
                    </button>
                </form>

                <div class="resend-section">
                    Didn't receive the code? 
                    <button id="resendBtn" type="button" class="resend-btn">Resend Code</button>
                    <div id="timer" class="timer"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const otpInputs = document.querySelectorAll(".otp-input");
            const form = document.getElementById("otpForm");
            const verifyBtn = document.getElementById("verifyBtn");
            const btnText = document.getElementById("btnText");
            const loader = document.getElementById("loader");
            const resendBtn = document.getElementById("resendBtn");
            const timerDiv = document.getElementById("timer");
            const alertBox = document.getElementById('alertBox');
            const alertIcon = document.getElementById('alertIcon');
            const alertMessage = document.getElementById('alertMessage');

            let initialTimer = 60;
            let resendCooldown = 30;
            let countdown;
            let currentTime = initialTimer;
            let isSubmitting = false;

            otpInputs[0].focus();

            // OTP input handling (same as verify-otp)
            otpInputs.forEach((input, index) => {
                input.addEventListener("input", (e) => {
                    const value = e.target.value;
                    
                    if (!/^\d$/.test(value)) {
                        e.target.value = '';
                        return;
                    }

                    if (value && index < otpInputs.length - 1) {
                        otpInputs[index + 1].focus();
                    }

                    input.classList.remove('error');
                    hideAlert();
                });

                input.addEventListener("keydown", (e) => {
                    if (e.key === "Backspace") {
                        if (!input.value && index > 0) {
                            otpInputs[index - 1].focus();
                        }
                        input.classList.remove('error');
                    }
                });

                input.addEventListener("paste", (e) => {
                    e.preventDefault();
                    const pastedData = e.clipboardData.getData('text');
                    const digits = pastedData.replace(/\D/g, '').slice(0, 6);
                    
                    digits.split('').forEach((digit, i) => {
                        if (otpInputs[i]) {
                            otpInputs[i].value = digit;
                        }
                    });
                    
                    const nextEmpty = digits.length < 6 ? digits.length : 5;
                    otpInputs[nextEmpty].focus();
                });
            });

            // Form submission
            form.addEventListener("submit", async (e) => {
                e.preventDefault();

                if (isSubmitting) return;

                const otp = Array.from(otpInputs).map(input => input.value).join("");

                if (otp.length !== 6) {
                    otpInputs.forEach(input => {
                        if (!input.value) {
                            input.classList.add('error');
                        }
                    });
                    
                    showAlert('Please enter all 6 digits', 'error');
                    return;
                }

                setLoadingState(true);

                try {
                    const response = await fetch("/forgot-password-otp", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ otp })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        showAlert('Code verified successfully! Redirecting...', 'success');
                        setTimeout(() => window.location.href = data.redirectUrl, 1500);
                    } else {
                        otpInputs.forEach(input => input.classList.add('error'));
                        showAlert(data.message || 'Verification failed', 'error');
                        
                        otpInputs.forEach(input => input.value = '');
                        otpInputs[0].focus();
                    }
                } catch (error) {
                    showAlert('Network error. Please try again.', 'error');
                } finally {
                    setLoadingState(false);
                }
            });

            function setLoadingState(loading) {
                isSubmitting = loading;
                verifyBtn.disabled = loading;
                btnText.style.display = loading ? 'none' : 'inline';
                loader.style.display = loading ? 'inline-block' : 'none';
            }

            function showAlert(message, type) {
                alertMessage.textContent = message;
                alertBox.className = `alert ${type} show`;
                alertIcon.className = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle';
                
                if (type === 'success') {
                    setTimeout(hideAlert, 5000);
                }
            }

            function hideAlert() {
                alertBox.classList.remove('show');
            }

            // Timer functions (same as verify-otp)
            function startTimer(duration, isResend = false) {
                clearInterval(countdown);
                currentTime = duration;
                resendBtn.disabled = true;
                
                updateTimerDisplay(isResend);

                countdown = setInterval(() => {
                    currentTime--;
                    updateTimerDisplay(isResend);

                    if (currentTime <= 0) {
                        clearInterval(countdown);
                        timerDiv.innerHTML = "";
                        resendBtn.disabled = false;
                        resendBtn.innerHTML = "Resend Code";
                    }
                }, 1000);
            }

            function updateTimerDisplay(isResend) {
                const minutes = Math.floor(currentTime / 60);
                const seconds = currentTime % 60;
                const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                if (isResend) {
                    timerDiv.innerHTML = `Resend available in ${timeString}`;
                    resendBtn.innerHTML = `Resend Code (${timeString})`;
                } else {
                    timerDiv.innerHTML = `Time remaining: ${timeString}`;
                }
            }

            // Resend OTP
            resendBtn.addEventListener("click", async () => {
                resendBtn.disabled = true;
                resendBtn.innerHTML = '<span class="resend-spinner"></span>Sending...';
                
                try {
                    const response = await fetch("/forgot-password-resend", { method: "PUT" });
                    const data = await response.json();

                    if (data.success) {
                        showAlert('New reset code sent successfully!', 'success');
                        
                        otpInputs.forEach(input => {
                            input.value = '';
                            input.classList.remove('error');
                        });
                        otpInputs[0].focus();
                        
                        startTimer(resendCooldown, true);
                        
                    } else {
                        resendBtn.disabled = false;
                        resendBtn.innerHTML = "Resend Code";
                        showAlert(data.message || 'Failed to resend code', 'error');
                    }
                } catch (error) {
                    resendBtn.disabled = false;
                    resendBtn.innerHTML = "Resend Code";
                    showAlert('Network error. Please try again.', 'error');
                }
            });

            startTimer(initialTimer, false);
        });
    </script>
</body>
</html>
