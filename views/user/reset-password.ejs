<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password - AURUM</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Inter', sans-serif; line-height: 1.6; color: #333; background: #f8fafc; }
        
        .container { display: flex; min-height: 100vh; background: #fff; box-shadow: 0 20px 25px -5px rgba(0,0,0,0.1); }
        
        .image-section { flex: 1; background: linear-gradient(135deg, #8B7355 0%, #A0956B 100%); 
            background-image: url('https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&q=80');
            background-size: cover; background-position: center; position: relative; display: flex; align-items: center; justify-content: center; }
        .overlay { position: absolute; top: 0; left: 0; right: 0; bottom: 0; 
            background: linear-gradient(135deg, rgba(139,115,85,0.9) 0%, rgba(160,149,107,0.9) 100%);
            display: flex; align-items: center; justify-content: center; text-align: center; color: white; padding: 2rem; }
        .brand-info h1 { font-size: 4rem; font-weight: 700; margin-bottom: 1rem; letter-spacing: 0.2em; color: #F5F5DC; }
        .brand-info p { font-size: 1.3rem; font-weight: 300; max-width: 450px; opacity: 0.95; line-height: 1.8; color: #F5F5DC; }
        
        .form-section { flex: 1; display: flex; align-items: center; justify-content: center; padding: 2rem; background: #ffffff; }
        .form-container { width: 100%; max-width: 450px; }
        .form-header { text-align: center; margin-bottom: 2rem; }
        .form-header h2 { font-size: 2.2rem; font-weight: 600; color: #8B7355; margin-bottom: 0.5rem; letter-spacing: 0.05em; }
        .form-header p { color: #6B5B47; font-size: 1rem; font-style: italic; }
        
        .alert { padding: 1rem; border-radius: 12px; margin-bottom: 1.5rem; text-align: center; font-size: 0.9rem; font-weight: 500; display: none; }
        .alert.error { background: #fed7d7; border: 1px solid #e53e3e; color: #c53030; }
        .alert.success { background: #c6f6d5; border: 1px solid #38a169; color: #2f855a; }
        .alert.show { display: flex; align-items: center; justify-content: center; gap: 0.5rem; }
        
        .form-group { margin-bottom: 1.5rem; }
        .input-container { position: relative; }
        .input-container input { width: 100%; padding: 1rem 1rem 1rem 3rem; border: 2px solid #D4C4A8; border-radius: 12px; 
            font-size: 1rem; background: #FEFCF7; transition: all 0.3s ease; outline: none; }
        .input-container input:focus { border-color: #8B7355; background: #fff; box-shadow: 0 0 0 3px rgba(139,115,85,0.10); transform: translateY(-2px); }
        .input-container input.error { border-color: #e53e3e; background: #fed7d7; }
        .input-icon { position: absolute; left: 1rem; top: 50%; transform: translateY(-50%); color: #8B7355; transition: color 0.3s ease; }
        .toggle-password { position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); color: #8B7355; cursor: pointer; transition: color 0.3s ease; }
        .toggle-password:hover { color: #6B5B47; }
        
        .error-message { display: block; color: #e53e3e; font-size: 0.875rem; margin-top: 0.5rem; margin-left: 0.5rem; 
            opacity: 0; transform: translateY(-10px); transition: all 0.3s ease; }
        .error-message.show { opacity: 1; transform: translateY(0); }
        
        .reset-btn { width: 100%; padding: 1rem; background: linear-gradient(135deg, #8B7355 0%, #A0956B 100%); 
            color: white; border: none; border-radius: 12px; font-size: 1.1rem; font-weight: 600; cursor: pointer; 
            transition: all 0.3s ease; margin-bottom: 1.5rem; letter-spacing: 0.05em; display: flex; align-items: center; justify-content: center; gap: 0.5rem; }
        .reset-btn:hover:not(:disabled) { transform: translateY(-2px); box-shadow: 0 10px 25px rgba(139,115,85,0.3); }
        .reset-btn:disabled { opacity: 0.6; cursor: not-allowed; transform: none; }
        
        .loading { display: none; width: 20px; height: 20px; border: 3px solid #ffffff; border-radius: 50%; border-top-color: transparent; animation: spin 1s ease-in-out infinite; }
        @keyframes spin { to { transform: rotate(360deg); } }
        
        .password-tips { background: #f7fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 1rem; margin-bottom: 1.5rem; }
        .password-tips h4 { color: #4a5568; font-size: 0.9rem; font-weight: 600; margin-bottom: 0.5rem; }
        .password-tips ul { list-style: none; font-size: 0.8rem; color: #718096; }
        .password-tips li { margin-bottom: 0.25rem; }
        .password-tips li::before { content: 'âœ“'; color: #48bb78; font-weight: bold; margin-right: 0.5rem; }
        
        @media (max-width: 768px) {
            .container { flex-direction: column; }
            .image-section { min-height: 30vh; flex: none; }
            .brand-info h1 { font-size: 2.5rem; }
            .brand-info p { font-size: 1.1rem; }
            .form-section { padding: 1.5rem; }
            .form-header h2 { font-size: 1.8rem; }
        }
        @media (max-width: 480px) {
            .form-section { padding: 1rem; }
            .input-container input { padding: 0.875rem 0.875rem 0.875rem 2.5rem; }
            .input-icon { left: 0.875rem; }
            .toggle-password { right: 0.875rem; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="image-section">
            <div class="overlay">
                <div class="brand-info">
                    <h1>AURUM</h1>
                    <p>Create your new password and continue your luxury fashion journey with enhanced security.</p>
                </div>
            </div>
        </div>
        
        <div class="form-section">
            <div class="form-container">
                <div class="form-header">
                    <h2>Create New Password</h2>
                    <p>Enter your new password to complete the reset process</p>
                </div>

                <% if (typeof message !== 'undefined' && message) { %>
                    <div class="alert error show">
                        <i class="fas fa-exclamation-circle"></i>
                        <%= message %>
                    </div>
                <% } %>

                <div class="alert" id="alertBox">
                    <i class="fas fa-info-circle" id="alertIcon"></i>
                    <span id="alertMessage"></span>
                </div>

                <div class="password-tips">
                    <h4>Password Requirements:</h4>
                    <ul>
                        <li>At least 8 characters long</li>
                        <li>Include uppercase and lowercase letters</li>
                        <li>Include at least one number</li>
                        <li>Strong and unique password</li>
                    </ul>
                </div>

                <form id="resetPasswordForm">
                    <div class="form-group">
                        <div class="input-container">
                            <input type="password" id="password" name="password" placeholder="New Password" required>
                            <i class="fas fa-lock input-icon"></i>
                            <i class="fas fa-eye toggle-password" id="togglePassword"></i>
                            <span class="error-message" id="passwordError"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-container">
                            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm New Password" required>
                            <i class="fas fa-lock input-icon"></i>
                            <i class="fas fa-eye toggle-password" id="toggleConfirmPassword"></i>
                            <span class="error-message" id="confirmPasswordError"></span>
                        </div>
                    </div>
                    
                    <button type="submit" class="reset-btn" id="resetBtn">
                        <span id="btnText">Reset Password</span>
                        <div class="loading" id="btnLoader"></div>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('resetPasswordForm');
            const inputs = {
                password: document.getElementById('password'),
                confirmPassword: document.getElementById('confirmPassword')
            };
            const errors = {
                password: document.getElementById('passwordError'),
                confirmPassword: document.getElementById('confirmPasswordError')
            };
            const togglePassword = document.getElementById('togglePassword');
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            const resetBtn = document.getElementById('resetBtn');
            const btnText = document.getElementById('btnText');
            const btnLoader = document.getElementById('btnLoader');
            const alertBox = document.getElementById('alertBox');
            const alertIcon = document.getElementById('alertIcon');
            const alertMessage = document.getElementById('alertMessage');
            
            let isSubmitting = false;

            // Password toggles
            togglePassword.addEventListener('click', function() {
                togglePasswordVisibility('password', this);
            });
            
            toggleConfirmPassword.addEventListener('click', function() {
                togglePasswordVisibility('confirmPassword', this);
            });

            function togglePasswordVisibility(inputId, toggleIcon) {
                const input = document.getElementById(inputId);
                if (input.type === 'password') {
                    input.type = 'text';
                    toggleIcon.classList.remove('fa-eye');
                    toggleIcon.classList.add('fa-eye-slash');
                } else {
                    input.type = 'password';
                    toggleIcon.classList.remove('fa-eye-slash');
                    toggleIcon.classList.add('fa-eye');
                }
            }

            // Input validation
            Object.keys(inputs).forEach(key => {
                inputs[key].addEventListener('blur', () => validateField(key));
                inputs[key].addEventListener('input', () => clearError(key));
            });

            // Form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                if (isSubmitting || !validateForm()) return;
                
                setLoadingState(true);
                hideAlert();
                
                try {
                    const formData = new FormData(form);
                    const data = {
                        password: formData.get('password'),
                        confirmPassword: formData.get('confirmPassword')
                    };
                    
                    const response = await fetch('/reset-password', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify(data)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showAlert('Password reset successful! Redirecting to homepage...', 'success');
                        setTimeout(() => window.location.href = result.redirectUrl, 2000);
                    } else {
                        showAlert(result.message || 'Password reset failed', 'error');
                    }
                } catch (error) {
                    console.error('Reset password error:', error);
                    showAlert('Network error. Please try again.', 'error');
                } finally {
                    setLoadingState(false);
                }
            });

            function setLoadingState(loading) {
                isSubmitting = loading;
                resetBtn.disabled = loading;
                btnText.style.display = loading ? 'none' : 'inline';
                btnLoader.style.display = loading ? 'inline-block' : 'none';
            }

            function showAlert(message, type) {
                alertMessage.textContent = message;
                alertBox.className = `alert ${type} show`;
                alertIcon.className = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle';
                
                if (type === 'success') {
                    setTimeout(hideAlert, 5000);
                }
            }

            function hideAlert() {
                alertBox.classList.remove('show');
            }

            function validateForm() {
                return Object.keys(inputs).every(validateField);
            }

            function validateField(fieldName) {
                const value = inputs[fieldName].value.trim();
                let isValid = true;
                let errorMessage = '';
                
                switch (fieldName) {
                    case 'password':
                        if (!value) {
                            errorMessage = 'Password is required';
                            isValid = false;
                        } else if (value.length < 8) {
                            errorMessage = 'Password must be at least 8 characters';
                            isValid = false;
                        } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(value)) {
                            errorMessage = 'Password must contain uppercase, lowercase, and number';
                            isValid = false;
                        }
                        break;
                        
                    case 'confirmPassword':
                        if (!value) {
                            errorMessage = 'Please confirm your password';
                            isValid = false;
                        } else if (value !== inputs.password.value) {
                            errorMessage = 'Passwords do not match';
                            isValid = false;
                        }
                        break;
                }
                
                showError(fieldName, errorMessage, !isValid);
                return isValid;
            }

            function showError(fieldName, message, show) {
                const errorElement = errors[fieldName];
                const inputElement = inputs[fieldName];
                
                if (show) {
                    errorElement.textContent = message;
                    errorElement.classList.add('show');
                    inputElement.classList.add('error');
                } else {
                    errorElement.classList.remove('show');
                    inputElement.classList.remove('error');
                }
            }
            
            function clearError(fieldName) {
                showError(fieldName, '', false);
                hideAlert();
            }

            inputs.password.focus();
        });
    </script>
</body>
</html>
